[{"id":"167f39d53da8da1b52c7941440e351aa","title":"Android native commonly used controls","content":"📘 Android 原生常用控件与 Java 示例代码🧩 基础布局类控件\n\n\n控件\n描述\n\n\n\nLinearLayout\n线性布局，子元素水平或垂直排列\n\n\nRelativeLayout\n相对布局，子元素相对于其他元素或父容器\n\n\nConstraintLayout\n约束布局，强大且高性能的布局方式\n\n\nFrameLayout\n用于层叠显示内容\n\n\nScrollView\n可滚动的单子项容器\n\n\n1234567&lt;LinearLayout    android:orientation=&quot;vertical&quot;    android:layout_width=&quot;match_parent&quot;    android:layout_height=&quot;match_parent&quot;&gt;        &lt;!-- 子控件放在这里 --&gt;&lt;/LinearLayout&gt;\n\n\n📝 输入控件1. EditText - 文本输入框1234567&lt;EditText    android:id=&quot;@+id/et_input&quot;    android:layout_width=&quot;match_parent&quot;    android:layout_height=&quot;wrap_content&quot;    android:hint=&quot;Enter text&quot; /&gt;EditText etInput = findViewById(R.id.et_input);String input = etInput.getText().toString();\n\n\n2. Button - 按钮123456789&lt;Button    android:id=&quot;@+id/btn_submit&quot;    android:layout_width=&quot;wrap_content&quot;    android:layout_height=&quot;wrap_content&quot;    android:text=&quot;Submit&quot; /&gt;Button btnSubmit = findViewById(R.id.btn_submit);btnSubmit.setOnClickListener(v -&gt; &#123;    // Handle click&#125;);\n\n\n3. TextView - 文本标签1234567&lt;TextView    android:id=&quot;@+id/tv_title&quot;    android:layout_width=&quot;wrap_content&quot;    android:layout_height=&quot;wrap_content&quot;    android:text=&quot;Hello World&quot; /&gt;TextView tvTitle = findViewById(R.id.tv_title);tvTitle.setText(&quot;Updated Text&quot;);\n\n\n✅ 选择控件1. CheckBox - 多选框123456789&lt;CheckBox    android:id=&quot;@+id/checkbox&quot;    android:layout_width=&quot;wrap_content&quot;    android:layout_height=&quot;wrap_content&quot;    android:text=&quot;Agree&quot; /&gt;CheckBox checkbox = findViewById(R.id.checkbox);if (checkbox.isChecked()) &#123;    // Checked&#125;\n\n\n2. RadioButton + RadioGroup - 单选框组123456789101112&lt;RadioGroup    android:id=&quot;@+id/radio_group&quot;    android:layout_width=&quot;wrap_content&quot;    android:layout_height=&quot;wrap_content&quot;&gt;    &lt;RadioButton android:id=&quot;@+id/radio1&quot; android:text=&quot;Option 1&quot; /&gt;    &lt;RadioButton android:id=&quot;@+id/radio2&quot; android:text=&quot;Option 2&quot; /&gt;&lt;/RadioGroup&gt;RadioGroup radioGroup = findViewById(R.id.radio_group);int selectedId = radioGroup.getCheckedRadioButtonId();RadioButton selected = findViewById(selectedId);String value = selected.getText().toString();\n\n\n3. Spinner - 下拉列表12345678910&lt;Spinner    android:id=&quot;@+id/spinner&quot;    android:layout_width=&quot;match_parent&quot;    android:layout_height=&quot;wrap_content&quot; /&gt;Spinner spinner = findViewById(R.id.spinner);ArrayAdapter&lt;String&gt; adapter = new ArrayAdapter&lt;&gt;(    this, android.R.layout.simple_spinner_item,    new String[]&#123;&quot;Option A&quot;, &quot;Option B&quot;, &quot;Option C&quot;&#125;);adapter.setDropDownViewResource(android.R.layout.simple_spinner_dropdown_item);spinner.setAdapter(adapter);\n\n\n📋 列表类控件1. ListView123456789&lt;ListView    android:id=&quot;@+id/list_view&quot;    android:layout_width=&quot;match_parent&quot;    android:layout_height=&quot;wrap_content&quot; /&gt;ListView listView = findViewById(R.id.list_view);ArrayAdapter&lt;String&gt; adapter = new ArrayAdapter&lt;&gt;(    this, android.R.layout.simple_list_item_1,    Arrays.asList(&quot;Item 1&quot;, &quot;Item 2&quot;, &quot;Item 3&quot;));listView.setAdapter(adapter);\n\n\n2. RecyclerView（需依赖）1234567&lt;androidx.recyclerview.widget.RecyclerView    android:id=&quot;@+id/recycler_view&quot;    android:layout_width=&quot;match_parent&quot;    android:layout_height=&quot;match_parent&quot; /&gt;RecyclerView recyclerView = findViewById(R.id.recycler_view);recyclerView.setLayoutManager(new LinearLayoutManager(this));recyclerView.setAdapter(new MyAdapter(myList));\n\n\n📦 图像&#x2F;多媒体控件1. ImageView1234567&lt;ImageView    android:id=&quot;@+id/image_view&quot;    android:layout_width=&quot;100dp&quot;    android:layout_height=&quot;100dp&quot;    android:src=&quot;@drawable/ic_launcher&quot; /&gt;ImageView imageView = findViewById(R.id.image_view);imageView.setImageResource(R.drawable.my_image);\n\n\n📊 进度类控件1. ProgressBar123456789&lt;ProgressBar    android:id=&quot;@+id/progress_bar&quot;    style=&quot;?android:attr/progressBarStyleHorizontal&quot;    android:layout_width=&quot;match_parent&quot;    android:layout_height=&quot;wrap_content&quot;    android:max=&quot;100&quot;    android:progress=&quot;30&quot; /&gt;ProgressBar progressBar = findViewById(R.id.progress_bar);progressBar.setProgress(70);\n\n\n📆 日期和时间控件1. DatePickerDialog &amp; TimePickerDialog123new DatePickerDialog(this, (view, year, month, dayOfMonth) -&gt; &#123;    String date = year + &quot;-&quot; + (month + 1) + &quot;-&quot; + dayOfMonth;&#125;, 2025, 6, 29).show();\n\n\n📦 弹窗&#x2F;提示控件1. Toast12javaToast.makeText(this, &quot;Operation successful&quot;, Toast.LENGTH_SHORT).show();\n\n2. AlertDialog123456new AlertDialog.Builder(this)    .setTitle(&quot;Warning&quot;)    .setMessage(&quot;Are you sure you want to continue?&quot;)    .setPositiveButton(&quot;Yes&quot;, null)    .setNegativeButton(&quot;No&quot;, null)    .show();\n\n\n🔚 结语这是常见 Android 原生 UI 控件及 Java 示例代码的基本合集，适用于：\n\n快速参考开发\n学习安卓控件使用\n教学整理&#x2F;代码笔记\n\n","slug":"Android native commonly used controls","date":"2025-07-29T18:47:07.000Z","categories_index":"","tags_index":"Android native","author_index":"Felix Still"},{"id":"cefa2fc37006a5e3cbed334f7a0a3e71","title":"Entity Framework实现具体业务功能","content":"下面是一个 WinForms + Entity Framework（EF）实现具体业务功能 的完整参考，包括：\n\n🔹 数据绑定到 DataGridView\n🔹 使用 EF 进行查询\n🔹 批量操作（例如删除、修改）\n🔹 控件交互（复选框列、按钮列）\n\n🧩 示例背景：数据库中有一张 Volunteer 表结构如下：\n🧩 示例背景：数据库中有一张 Volunteer 表结构如下：12345678public class Volunteer&#123;    public int Id &#123; get; set; &#125;    public string Name &#123; get; set; &#125;    public int? Age &#123; get; set; &#125;    public string Phone &#123; get; set; &#125;    public bool IsEnabled &#123; get; set; &#125;&#125;\n\nEF DbContext 示例：\n1234public class AppDbContext : DbContext&#123;    public DbSet&lt;Volunteer&gt; Volunteers &#123; get; set; &#125;&#125;\n\n✅ 一、EF 查询并绑定到 DataGridView1. 封装构造DataGridViewTextColumn的方法12345678private DataGridViewTextColumn buildDataGridViewTextColumn(string name,string headerText,string dataPropertyName,bool? visible = false)&#123;\treturn new DataGridViewTextColumn&#123;\t\tName = name,\t\tHeaderText = headerText,\t\tDataPropertyName = dataPropertyName,\t\tVisible = visible\t&#125;&#125;\n\n2. 初始化DataGridView数据源12345678910111213141516private void loadData()&#123;\ttry&#123;\t\t\tusing(DB_DeskTop context = new DB_DeskTop())&#123;\t\t\t\t\tvar result= context.Volunteers.Select(v =&gt; new &#123;\t\t\t\t\t\t\tid = v.id,\t\t\t\t\t\t\tname = v.name,\t\t\t\t\t\t\tage = v.age,\t\t\t\t\t\t\tphone = v.phone,\t\t\t\t\t\t\tenable = v.isEnable == 1 ? &quot;启用&quot; : &quot;未启用&quot;\t\t\t\t\t&#125;).ToList();\t\t\t\t\tdatagridview1.DataSource = result;\t\t\t&#125;\t&#125;catch(Exception ex)&#123;\t\t\tMessageBox.Show($&quot;error info:&#123;ex.Message&#125;&quot;);\t&#125;&#125;\n","slug":"Entity Framework实现具体业务功能","date":"2025-07-29T09:26:07.000Z","categories_index":"","tags_index":"Entity Framework","author_index":"Felix Still"},{"id":"cc26a2e6e1a0489e6526665c276705dd","title":"DataGridView常用操作","content":"一、动态添加列\n前置准备：清空旧列（可选）\n1datagridview1.Columns.Clear();\n\n动态添加各种列\n\n添加文本列（DataGridViewTextBoxColumn ）\n\n123456DataGridViewTextBoxColumn datagridviewTextBoxColumn = new DataGridViewTextBoxColumn();datagridviewTextBoxColumn.Name = &quot;id&quot;;datagridviewTextBoxColumn.HeaderText = &quot;&quot;;datagridviewTextBoxColumn.Visible = false;datagridviewTextBoxColumn.DataPropertyName = &quot;id&quot;;dataGridView1.Columns.Add(textCol);\n\n\n添加复选框列（DataGridViewCheckBoxColumn）\n\n123456DataGridViewCheckBoxColumn chkCol = new DataGridViewCheckBoxColumn();chkCol.Name = &quot;chkSelect&quot;;chkCol.HeaderText = &quot;选择&quot;;chkCol.TrueValue = true;chkCol.FalseValue = false;dataGridView1.Columns.Add(chkCol);\n\n\n添加按钮列（DataGridViewButtonColumn）\n\n1234567DataGridViewButtonColumn btnCol = new DataGridViewButtonColumn ();btnCol.Name = &quot;btnAction&quot;;btnCol.HeaderText = &quot;操作&quot;;btnCol.Text = &quot;详情&quot;;btnCol.UseColumnTextForButtonValue = true; // 显示文本btnCol.Width = 80;dataGridView1.Columns.Add(btnCol);\n\n\n下拉框列（DataGridViewComboBoxColumn）\n\n123456DataGridViewComboBoxColumn comboCol = new DataGridViewComboBoxColumn();comboCol.Name = &quot;cboStatus&quot;;comboCol.HeaderText = &quot;状态&quot;;comboCol.Items.AddRange(&quot;启用&quot;,&quot;禁用&quot;,&quot;审核中&quot;);comboCol.Width = 100;dataGridView1.Columns.Add(comboCol);\n\n\n\n\n\n\n\n\n\n\n✅ 可绑定数据源：comboCol.DataSource = yourList; comboCol.DisplayMember = &quot;Name&quot;; comboCol.ValueMember = &quot;ID&quot;;\n\n添加图像列（DataGridViewImageColumn）\n\n123456DataGridViewImageColumn imgCol = new DataGridViewImageColumn();imgCol.Name = &quot;imgPhoto&quot;;imgCol.HeaderText = &quot;头像&quot;;imgCol.ImageLayout = DataGridViewImageCellLayout.Zoom;imgCol.width = 60;dataGridView1.Columns.Add(imgCol);\n\n\n\n\n\n\n\n\n\n\n🎯 为 imgCol 设置值时：\n1dataGridView1.Rows[0].Cells[&quot;imgPhoto&quot;].Value = Image.FromFile(&quot;path/to/image.jpg&quot;);\n\n二、绑定数据（Bind Data）绑定List数据源\n1dataGridView1.DataSource = yourList;\n\n三、列设置（Column Settings）1. 设置列标题（Set Column Header Text）1dataGridView1.Columns[&quot;columnName&quot;].HeaderText = &quot;显示名称&quot;;\n\n2. 隐藏某列（Hide Column）1dataGridView1.Columns[&quot;columnName&quot;].Visible = false;\n\n3. 设置列宽（Set Column Width）1dataGridView1.Columns[&quot;columnName&quot;].Width = 120;\n\n4. 设置列只读（Make Column ReadOnly）1dataGridView1.Columns[&quot;columnName&quot;].ReadOnly = true;\n\n四、行设置（Row Settings）1. 设置行高（Row Height）1dataGridView1.RowTemplate.Height = 40;\n\n2. 设置行背景色（Set Row BackColor）1dataGridView1.Rows[i].DefaultCellStyle.BackColor = Color.LightBlue;\n\n3. 设置选中行颜色（Selected Row Color）1dataGridView1.DefaultCellStyle.SelectionBackColor = Color.Orange;\n\n五、获取数据（Get Data）\n获取选中行（Get Selected Row）\n\n1DataGridViewRow selectedRow = datagridview1.CurrentRow;\n\n\n获取某列值（Get Cell Value）\n\n1string columnValue = datagridview1.CurrentRow.Cells[&quot;columnName&quot;].Value.ToString();\n\n\n遍历所有行（Loop All Rows）\n\n123foreach(DataGridViewRow row in datagridview1.rows)&#123;\t var value = row.Cells[&quot;columnName&quot;].Value;&#125;\n\n六、添加&#x2F;删除行（Add&#x2F;Delete Rows）1. 添加空行（Add Empty Row）1dataGridView1.Rows.Add();\n\n2. 添加带数据的行（Add Row with Values）1dataGridView1.Rows.Add(&quot;值1&quot;, &quot;值2&quot;);\n\n3. 删除选中行（Delete Selected Row）1234if (dataGridView1.CurrentRow != null)&#123;    dataGridView1.Rows.Remove(dataGridView1.CurrentRow);&#125;\n\n七、控件交互（Events）\n单元格点击事件（CellClick）\n\n1234private void dataGridView1_CellClick(object sender, DataGridViewCellEventArgs e)&#123;    var value = dataGridView1.Rows[e.RowIndex].Cells[e.ColumnIndex].Value;&#125;\n\n\n编辑后事件（CellValueChanged）\n\n1234private void dataGridView1_CellValueChanged(object sender, DataGridViewCellEventArgs e)&#123;    MessageBox.Show(&quot;值被修改！&quot;);&#125;\n\n八、复选框列（Checkbox Column）\n添加复选框列\n1234DataGridViewCheckBoxColumn checkColumn = new DataGridViewCheckBoxColumn();checkColumn.Name = &quot;Check&quot;;checkColumn.HeaderText = &quot;选择&quot;;dataGridView1.Columns.Add(checkColumn);\n\n获取选中复选框行（Get Checked Rows）\n123456foreach(DataGridViewRow row in datagridview1.Rows)&#123;\tbool isChecked = Convert.ToBoolean(row.Cells[&quot;Check&quot;].Value);\tif(isChecked)&#123;\t\t// 执行操作\t&#125;&#125;\n\n九、自定义按钮列（Button Column）添加按钮列并处理点击事件：\n12345678910111213DataGridViewButtonColumn btn = new DataGridViewButtonColumn();btn.Name = &quot;Detail&quot;;btn.HeaderText = &quot;操作&quot;;btn.Text = &quot;详情&quot;;btn.UseColumnTextForButtonValue = true;dataGridView1.Columns.Add(btn);private void dataGridView1_CellContentClick(object sender, DataGridViewCellEventArgs e)&#123;    if (dataGridView1.Columns[e.ColumnIndex].Name == &quot;Detail&quot;)    &#123;        MessageBox.Show(&quot;点击了详情&quot;);    &#125;&#125;\n\n十、批量操作（Batch Operations）\n获取选中复选框的所有行数据（Get Checked Rows）\n123456List&lt;int&gt; idList = new List&lt;int&gt;();foreach(DataGridViewRow row in dataGridView1.Rows)&#123;\t\tif(Convert.ToBoolean(row.Cells[&quot;check&quot;].Value) == true)&#123;\t\t\tidList.Add(Convert.ToInt32(row.Cells[&quot;id&quot;].Value));\t\t&#125;&#125;\n\n批量删除（Batch Delete）\n12345for(int i = datagridview1.Rows.Count - 1;i &gt;= 0;i--)&#123;\tif(Convert.ToBoolean(row.Cells[&quot;Check&quot;].Value) == true)&#123;\t\tdatagridview1.Rows.removeAt(i);\t&#125;&#125;\n\n","slug":"DataGridView常用操作","date":"2025-07-29T09:26:07.000Z","categories_index":"","tags_index":"Winform","author_index":"Felix Still"},{"id":"0adec41aad666bb9dbc2e935ddaf42e9","title":"Entity Framework常用操作","content":"一、基础操作（增删改查）▶ 添加数据（Create）\n1234DB context = new DB()User user = new User &#123;Name = &quot;Felix Still&quot;,Age = 20&#125;;context.Users.Add(user);context.SaveChanges();\n\n▶ 查询数据（Read）\n123456// Query all data.User user = context.Users.ToList&lt;User&gt;(); || var user = context.Users.ToList();// Conditional query.User user = context.Users.FirstOrDefault&lt;User&gt;(u =&gt; u.id == 1);// Fuzzy matchingList&lt;User&gt; userList = context.Users.Where(u =&gt; u.Name.Contains(&quot;Felix&quot;));\n\n▶ 修改数据（Update）\n123456User user = context.Users.FirstOrDefault&lt;User&gt;(u =&gt; u.id == 1);if(user == null)&#123;\tMessageBox.Show($&quot;error info:&#123;user.id&#125;的用户不存在&quot;);&#125;user.Name = &quot;Raymond&quot;;\tcontext.SaveChanges();\n\n▶ 删除数据（Delete）\n12345User user = context.Users.FirstOrDefault&lt;User&gt;(u =&gt; u.id == 1);if(user != null)&#123;\tcontext.Users.remove(user);\tcontext.SaveChanges();&#125;\n\n二、分页、排序、投影▶ 分页查询（Skip + Take）\n12345int pageSize = 10, pageIndex = 2;var pageData= context.Users.OrderBy(u =&gt; u.id)\t\t\t\t\t\t\t\t\t\t\t\t\t.Skip((pageIndex - 1)*pageSize)\t\t\t\t\t\t\t\t\t\t\t\t\t.Take(pageSize)\t\t\t\t\t\t\t\t\t\t\t\t\t.ToList();\n\n▶ 投影（Select）\n1var result = context.Users.Select(u =&gt; new &#123;user_id=u.id,username=u.name&#125;);\n\n三、事务处理12345678910111213using (var transaction = context.Database.BeginTransaction())&#123;    try    &#123;        // 业务逻辑        context.SaveChanges();        transaction.Commit();    &#125;    catch    &#123;        transaction.Rollback();    &#125;&#125;\n\n","slug":"Entity Framework常用操作","date":"2025-07-29T09:26:07.000Z","categories_index":"","tags_index":"Entity Framework","author_index":"Felix Still"},{"id":"4f746ee5321e2060cb95a81153a748fa","title":"图片上传控件","content":"✅ 一、使用控件组合实现图片上传功能💡 常用控件：\nPictureBox：用于展示图片\nButton：点击上传\nOpenFileDialog：选择图片文件\n\n🔧 二、完整示例代码📌 UI 布局示意：\nPictureBox：pictureBox1\nButton：btnUpload\nLabel：lblImagePath（显示路径，可选）\n\n🎯 上传图片并显示在 PictureBox 中123456789101112131415private void btnUpload_Click(object sender, EventArgs e)&#123;\tusing(OpenFileDialog ofd = new OpenFileDialog())&#123;\t\tofd.Title = &quot;选择图片&quot;;\t\tofd.Filter = &quot;图片文件 (*.jpg,*.jpeg,*.png)|*.jpg,*.jpeg,*.png&quot;;\t\tif(ofd.ShowDialog() == DialogResult.OK)&#123;\t\t\tstring imagePath = ofd.FileName;\t\t\t// 显示到PictureBox\t\t\tpictureBox1.Image = Image.FromFile(imagePath);\t\t\tpictureBox1.SizeMode = PictureBoxSizeMode.Zoom; // 自适应缩放\t\t\t// 保存路径以便后续操作\t\t\tlblImagePath.Text = imagePath;\t\t&#125;\t&#125;&#125;\n\n🧊 三、其他增强功能📦 1. 存储为二进制（用于存入数据库）12byte[] imageBytes = File.ReadAllBytes(ofd.FileName);// 可以保存到数据库的 byte[] 字段中\n\n🖼️ 2. 从数据库加载 byte[] 到 PictureBox1234using (MemoryStream ms = new MemoryStream(imageBytesFromDB))&#123;    pictureBox1.Image = Image.FromStream(ms);&#125;\n\n🔄 3. 清空图片按钮12pictureBox1.Image = null;lblImagePath.Text = &quot;&quot;;\n\n📌 总结：功能清单\n\n\n功能\n实现控件\n\n\n\n上传图片\nOpenFileDialog + PictureBox\n\n\n显示图片\nPictureBox.SizeMode &#x3D; Zoom\n\n\n获取路径\nOpenFileDialog.FileName\n\n\n转 byte[]\nFile.ReadAllBytes()\n\n\n加载 byte[]\nMemoryStream\n\n\n支持格式\n*.jpg; *.png; *.bmp; *.jpeg\n\n\n","slug":"图片上传控件","date":"2025-07-29T09:26:07.000Z","categories_index":"","tags_index":"Entity Framework","author_index":"Felix Still"}]